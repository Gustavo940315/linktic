name: Build and Push Eureka, API Gateway, MS-Product, and MS-Inventory Images to Docker Hub

on:
  push:
    branches:
      - main

jobs:
  build-eureka:
    runs-on: ubuntu-latest
    environment: env_prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Make gradlew executable for Eureka
        run: chmod +x ./ms-eureka/gradlew

      - name: Build Eureka Image
        run: |
          cd ms-eureka
          ./gradlew build -x test
          docker build --no-cache -t ingflorez940315/eureka_2025_repo:latest .
          docker push ingflorez940315/eureka_2025_repo:latest

  build-api-gateway:
    runs-on: ubuntu-latest
    needs: build-eureka

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Make gradlew executable for API Gateway
        run: chmod +x ./ms-api-gateway/gradlew

      - name: Build API Gateway without tests
        run: |
          cd ms-api-gateway
          ./gradlew build -x test

      - name: Build Docker Image for API Gateway
        run: |
          cd ms-api-gateway
          docker build --no-cache -t ingflorez940315/img_gateway_2025_repo:latest .

      - name: Push Docker Image to Docker Hub
        run: |
          docker push ingflorez940315/img_gateway_2025_repo:latest

  build-ms-product:
    runs-on: ubuntu-latest
    needs: build-api-gateway

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Make gradlew executable for MS-Product
        run: chmod +x ./ms-products/gradlew

      - name: Build MS-Product without tests
        run: |
          cd ms-products
          ./gradlew build -x test

      - name: Build Docker Image for MS-Product
        run: |
          cd ms-products
          docker build --no-cache -t ingflorez940315/img_ms_product_2025_repo:latest .

      - name: Push Docker Image to Docker Hub
        run: |
          docker push ingflorez940315/img_ms_product_2025_repo:latest

  build-ms-inventory:
    runs-on: ubuntu-latest
    needs: build-ms-product

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Make gradlew executable for MS-Inventory
        run: chmod +x ./ms-inventory/gradlew

      - name: Build MS-Inventory without tests
        run: |
          cd ms-inventory
          ./gradlew build -x test

      - name: Build Docker Image for MS-Inventory
        run: |
          cd ms-inventory
          docker build --no-cache -t ingflorez940315/img_ms_inventory_2025_repo:latest .

      - name: Push Docker Image to Docker Hub
        run: |
          docker push ingflorez940315/img_ms_inventory_2025_repo:latest

  deploy-ec2:
    runs-on: ubuntu-latest
    needs: build-ms-inventory

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Create .env file from secret
        run: |
          echo "${{ secrets.ENV_SECRET }}" > .env
          cat .env  # Verifica que el archivo .env se ha creado correctamente

      - name: Copy Docker Compose and .env to EC2
        run: |
          echo "ðŸ”‘ Copying Docker Compose and .env file to EC2"
          scp -o StrictHostKeyChecking=no -i "${{ secrets.EC2_SSH_KEY }}" docker-compose-prod.yml ubuntu@18.189.194.225:/home/ubuntu/
          scp -o StrictHostKeyChecking=no -i "${{ secrets.EC2_SSH_KEY }}" .env ubuntu@18.189.194.225:/home/ubuntu/

      - name: Connect to EC2 and Verify Connection
        run: |
          echo "ðŸ”‘ SSH Connection to EC2"
          ssh -o StrictHostKeyChecking=no -i "${{ secrets.EC2_SSH_KEY }}" ubuntu@18.189.194.225 "echo 'Connection successful to EC2!'"

      - name: Stop existing containers on EC2 (if any)
        run: |
          echo "ðŸ›‘ Stopping existing containers on EC2"
          ssh -o StrictHostKeyChecking=no -i "${{ secrets.EC2_SSH_KEY }}" ubuntu@18.189.194.225 "
            sudo docker-compose -f /home/ubuntu/docker-compose-prod.yml down || true
          "

      - name: Deploy Docker Compose on EC2
        run: |
          echo "ðŸš€ Running Docker Compose on EC2"
          ssh -o StrictHostKeyChecking=no -i "${{ secrets.EC2_SSH_KEY }}" ubuntu@18.189.194.225 "
            cd /home/ubuntu && sudo docker-compose --env-file .env -f docker-compose-prod.yml up -d